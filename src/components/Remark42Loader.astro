---
import siteConfig from '~/site.config'

const r = siteConfig.remark42
if (!r) {
  throw new Error('Remark42 configuration is missing in site.config.ts')
}
const host = r.host
const siteId = r.site_id
const components = r.components && r.components.length > 0 ? r.components : ['embed']
const componentName = components[0]
const remarkConfigJson = JSON.stringify({ host, site_id: siteId, components })
const embedMjs = `${host}/web/${componentName}.mjs`
const embedJs = `${host}/web/${componentName}.js`
---

<!-- 3) Yorumların görüneceği yer -->
<div id="remark42" data-host={host} data-site-id={siteId} data-components={JSON.stringify(components)}></div>

<!-- 1) Global config + 2) Loader (JS üzerinden eklenir) -->
<script is:inline>
  (function(){
    var el = document.getElementById('remark42')
    if (!el) return
    var host = el.getAttribute('data-host') || ''
    var site_id = el.getAttribute('data-site-id') || ''
    var componentsAttr = el.getAttribute('data-components') || '[]'
    var components
    try { components = JSON.parse(componentsAttr) } catch (e) { components = ['embed'] }
    if (!Array.isArray(components) || components.length === 0) components = ['embed']
    var name = components[0] || 'embed'

    function mapTheme(t){
      if (!t) return 'light'
      t = String(t).toLowerCase()
      return t.indexOf('dark') !== -1 ? 'dark' : 'light'
    }

    function injectScripts(theme){
      // 1) Global config with theme
      var remark_config = { host: host, site_id: site_id, components: components, theme: theme }
      window.remark_config = remark_config

      // Clear previous render if any
      try { el.innerHTML = '' } catch(e) {}

      // Remove previously injected remark scripts (best-effort)
      var head = document.head || document.body
      var prev = head.querySelectorAll('script[data-remark42]')
      prev.forEach(function(p){ p.parentNode && p.parentNode.removeChild(p) })

      // 2) Loader scripts
      var m = document.createElement('script')
      m.type = 'module'; m.defer = true; m.async = true
      m.src = host + '/web/' + name + '.mjs'
      m.setAttribute('data-remark42','')
      head.appendChild(m)

      var n = document.createElement('script')
      n.setAttribute('nomodule',''); n.defer = true; n.async = true
      n.src = host + '/web/' + name + '.js'
      n.setAttribute('data-remark42','')
      head.appendChild(n)
    }

    // Initial theme from page
    var currentTheme = document.documentElement.getAttribute('data-theme')
    injectScripts(mapTheme(currentTheme))

    // Observe theme changes and re-inject
    try {
      var obs = new MutationObserver(function(mutations){
        for (var i=0; i<mutations.length; i++){
          var mu = mutations[i]
          if (mu.type === 'attributes' && mu.attributeName === 'data-theme'){
            var t = document.documentElement.getAttribute('data-theme')
            injectScripts(mapTheme(t))
            break
          }
        }
      })
      obs.observe(document.documentElement, { attributes: true, attributeFilter: ['data-theme'] })
    } catch(e) {}
  })();
  // Türkçe: Sadece bu iki değeri değiştireceksin: host ve site_id
  // Tema, sayfadaki data-theme değerine göre otomatik olarak 'light'/'dark' ayarlanır.
</script>
